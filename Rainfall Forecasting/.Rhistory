vic_elec_ <- vic_elec %>%
filter(year(Time) = '2012') %>%
vic_elec_ <- vic_elec %>%
filter(yearmonth(Time) == yearmonth('2012 June') %>%
summarise(Demand = sum(Demand))
vic_elec_ %>%
vic_elec_ <- vic_elec %>%
filter(yearmonth(Time) == yearmonth('2012 June')) %>%
summarise(Demand = sum(Demand))
vic_elec_ %>%
autoplot(Demand)
# pelt
pelt %>%
autoplot(Lynx)
vic_elec_ <- vic_elec %>%
filter(yearmonth(Time) == yearmonth('2012 June')) %>%
summarise(Demand = sum(Demand))
vic_elec_ %>%
autoplot(Demand)
vic_elec_ <- vic_elec %>%
filter(yearmonth(Time) == yearmonth('2012 June')) %>%
vic_elec_ %>%
autoplot(Demand)
vic_elec_ <- vic_elec %>%
filter(yearmonth(Time) == yearmonth('2012 June'))
vic_elec_ %>%
autoplot(Demand)
# Problem 10
aus_production %>%
autoplot(Bricks)
vic_elec %>%
autoplot(Demand) + labs(title = 'Demand time plot', x = 'Year')
# Problem 11
aus_arrivals %>%
autoplot()
aus_arrivals %>%
ggseason()
install.packages("C:/Users/Carolina/Downloads/ggplot2_3.4.4.tar.gz", repos = NULL, type = "source")
aus_arrivals %>%
ggseason()
aus_arrivals %>%
gg_season()
library(ggplot2)
aus_arrivals %>%
gg_season()
# Problem 9
library(fpp3)
aus_arrivals %>%
gg_season()
aus_arrivals %>%
gg_subseries()
library(fpp3)
aus_production %>%
autoplot(Tobacco)
today -< sun so tommorw ?
View(ansett)
ansett %>%
filter(Class == 'Economy' & Airports == 'MEL-SYD') %>%
autoplot(box_cox(Passengers))
ansett %>%
filter(Class == 'Economy' & Airports == 'MEL-SYD') %>%
autoplot(box_cox(Passengers, 0.11))
ansett %>%
filter(Class == 'Economy' & Airports == 'MEL-SYD') %>%
autoplot(box_cox(Passengers, 5))
ansett %>%
filter(Class == 'Economy' & Airports == 'MEL-SYD') %>%
autoplot(Passengers)
pedestrian %>%
filter(Sensor == 'Southern Cross Station') %>%
autoplot(loglp(Count))
pedestrian %>%
filter(Sensor == 'Southern Cross Station') %>%
autoplot(log1p(Count))
# (a).
gas <- tail(aus_production, 5 * 4) %>% select(Gas)
# (a).
gas %>%
autoplot(Gas) + labs(y = 'Petajoules') + theme_minimal()
# (b). and (c).
decomp <- gas %>%
model(decomp = classical_decomposition(Gas, type = 'multiplicative')) %>%
components()
# (b). and (c).
decomp <- gas %>%
model(decomp = classical_decomposition(Gas, type = 'multiplicative')) %>%
decomp %>%  autoplot()
decomp %>% autoplot()
# (a).
canadian_gas %>%
autoplot()
canadian_gas %>%
gg_subseries()
candian %>%
gg_plot()
# (b).
fit <- canadian_gas %>%
model(STL(Volume)) %>%
componets()
fit %>% autoplot()
fit <- canadian_gas %>%
model(STL(Volume ~ season(window = 13))) %>%
componets()
fit <- canadian_gas %>%
model(STL(Volume ~ season(window = 13))) %>%
components()
fit %>% autoplot()
# (c).
fit %>% gg_season(season_year)
# (b)
regression_b <- lm(lsalary ~ lmktval + lsales + profits , data = ceosal2)
data("hprice1", package = "wooldridge")
# (b)
regression_b <- lm(lsalary ~ lmktval + lsales + profits , data = ceosal2)
library(fpp3)
# (b)
regression_b <- lm(lsalary ~ lmktval + lsales + profits , data = ceosal2)
library(wooldridge)
# (b)
regression_b <- lm(lsalary ~ lmktval + lsales + profits , data = ceosal2)
coef(regression_b)
summary(regression_b)
library(wooldridge)
View(CEOSAL2)
View(ceosal2)
# Average salary
mean(salary)
# Average salary
mean(ceosal2$salary)
# Average tenure
mean(ceosal2$comtenure)
# Average tenure
mean(ceosal2$comten)
# Average tenure
mean(ceosal2$ceoten)
# How many CEOs are in their first year as CEO
ceosal2 %>% ceosal2$ceoten = 0
# How many CEOs are in their first year as CEO
ceosal2 %>% fitler(ceosal2$ceoten == 0) %>% nrow()
# (a)
library(todyverse)
# (a)
library(tidyverse)
# How many CEOs are in their first year as CEO
ceosal2 %>% fitler(ceosal2$ceoten == 0) %>% nrow()
# How many CEOs are in their first year as CEO
ceosal2 %>% filter(ceosal2$ceoten == 0) %>% nrow()
# What is the longest tenure as CEO?
max(ceosal2$ceoten)
# (c)
lm(log(salary)~ceoten, data = ceosal2)
# (a)
View(sleep75)
lm(sleep~totwork, data = sleep75)
lm(sleep~totwrk, data = sleep75)
summary(lm(sleep~totwrk, data = sleep75))
# Number of observation
nrow(sleep75)
# Problem 16
View(rdchem)
# (a)
lm(log(rd)~log(sales), data = rdchem)
library(wooldridge)
library(wooldridge)
# With faminc
lm(bwght~cigs, data = bwght)
# With faminc
nrow(bwght)
summary(lm(bwght~cigs, data = bwght))
nobs(lm(bwght~cigs, data = bwght))
# With faminc
summary(lm(bwght~cigs+faminc, data = bwght))
# With faminc
summary(lm(bwght~cigs+faminc, data = bwght))
nobs(lm(bwght~cigs+faminc, data = bwght))
# Without faminc
summary(lm(bwght~cigs, data = bwght))
nobs(lm(bwght~cigs, data = bwght))
# (a)
lm(price~sqrt+bdrms, data = hprice1)
# (a)
lm(price~sqrft+bdrms, data = hprice1)
# (d)
summary(lm(price~sqrft+bdrms, data = hprice1))
# (a)
lm(lsalary~lsales+lmktval, data = ceosal2)
# (a)
summary(lm(lsalary~lsales+lmktval, data = ceosal2))
# (b)
lm(lsalary~lsales+lmktval+profits, data = ceosal2)
summary(lm(lsalary~lsales+lmktval, data = ceosal2))
summary(lm(lsalary~lsales+lmktval+profits, data = ceosal2))
# (c)
lm(lsalary~lsales+lmktval+profits+ceoten, data = ceosal2)
# (d)
cor(ceosal$lmktval, ceosal$profits)
# (d)
cor(ceosa2l$lmktval, ceosal2$profits)
# (d)
cor(ceosal2$lmktval, ceosal2$profits)
library(wooldridge)
# Minimum, maximum and average values of atndrte
min(attend$atndrte)
max(attend$atndrte)
mean(attend$atndrte)
# Minimum, maximum and average values of priGPA
min(attend$priGPA)
max(attend$priGPA)
mean(attend$priGPA)
# Minimum, maximum and average values of ACT
min(attend$ACT)
max(attend$ACT)
mean(attend$ACT)
# (b)
lm(atndre~priGPA+ACT, data = attend)
# (b)
lm(atndrte~priGPA+ACT, data = attend)
# (a)
library(tidyverse)
# (d)
attend %>% filter(attend$attend > 32) %>% nrow()
# (d)
attend %>% filter(attend$atndrte > 32) %>% nrow()
library(wooldridge)
lm(math10~log(expend)+lnchprg, data = data = meap93)
lm(math10~log(expend)+lnchprg, data = meap93)
summary(lm(math10~log(expend)+lnchprg, data = meap93)
summary(lm(math10~log(expend)+lnchprg, data = meap93))
summary(lm(math10~log(expend)+lnchprg, data = meap93)
library(tidyverse)
summary(lm(math10~log(expend)+lnchprg, data = meap93)
summary(lm(math10~log(expend)+lnchprg, data = meap93)
lm(math10~log(expend)+lnchprg, data = meap93)
summary(lm(math10~log(expend)+lnchprg, data = meap93)
summary(lm(math10~log(expend)+lnchprg, data = meap93))
data("meap93", package = "wooldridge")
lm(math10~log(expend)+lnchprg, data = meap93)
(lm(math10~log(expend)+lnchprg, data = meap93))
summary(lm(math10~log(expend)+lnchprg, data = meap93))
nobs(meap93)
meap93.nobs()
nrow(meap93)
lm(math10~log(expend)+, data = meap93)
lm(math10~log(expend), data = meap93)
library(wooldridge)
View(wage1)
lm(log(wage)~educ+exper+tenure, data = wage1)
u <- resid(lm(educ~exper+tenure, data = wage1))
lm(log(wage)+u, data = wage1)
lm(log(wage)~u, data = wage1)
fitted(lm(log(wage)~educ+exper+tenure, data = wage1))
cor(fitted(lm(log(wage)~educ+exper+tenure, data = wage1)), log(wage)) ^ 2
cor(fitted(lm(log(wage)~educ+exper+tenure, data = wage1)), log(wage1$wage)) ^ 2
summary(lm(log(wage)~educ+exper+tenure, data = wage1))
# (a)
lm(math10~log(expend)+lnchprg, data = math10)
# (a)
lm(math10~log(expend)+lnchprg, data = meap93)
nrow(meap93)
summary(lm(math10~log(expend)+lnchprg, data = meap93))
# (c)
lm(math10~log(expend), data = meap93)
# (d)
cor(meap93$lexpend, meap93$lnchprg)
library(fpp3)
# Problem 31
View(gafa_stock)
gafa_stock %>% autoplot()
gafa_stock %>% autoplot('AAPL')
gafa_stock.filter(Symbol == 'AMZN') %>% autoplot()
gafa_stock %>% filter(Symbol == 'AMZN') %>% autoplot()
gafa_stock %>% filter(Symbol == 'AMZN') %>% ACF(x) %>% autoplot()
gafa_stock %>% filter(Symbol == 'AMZN') %>% ACF() %>% autoplot()
gafa_stock %>% filter(Symbol == 'AMZN') %>% PACF() %>% autoplot()
# (a)
View(global_economy)
global_economy %>% filter(GDP == 'Turkish') %>% autoplot()
# (a)
View(global_economy)
global_economy %>% filter(GDP == 'Turkey') %>% autoplot()
global_economy %>% filter(GDP == 'Turkey') %>% autoplot()
global_economy %>% filter(GDP == 'Turkey') %>% autoplot(GDP)
global_economy %>% filter(GDP == 'Turkey') %>% autoplot()
library(wooldridge)
data(wage1, package = "wooldridge")
nrow(wage1)
View(wage1)
x <- cbind(1, wage1$educ, wage1$exper, wage1$tenure)
y <- wage1$lwage
xx <- solve(t(x) %*% x) # solve -> inverse matrix, %*% -> matrix multiplucation
beta_hat <- xx %*% t(x) %*% y
reg <- lm(lwage ~ educ + exper + tenure, data = wage1)
u_hat <- resid(reg)
sigma_2 <- (t(u_hat)) %*% u_hat) / (526 - 3 - 1)
library(wooldridge)
data(wage1, package = "wooldridge")
nrow(wage1)
View(wage1)
x <- cbind(1, wage1$educ, wage1$exper, wage1$tenure)
y <- wage1$lwage
xx <- solve(t(x) %*% x) # solve -> inverse matrix, %*% -> matrix multiplucation
beta_hat <- xx %*% t(x) %*% y
reg <- lm(lwage ~ educ + exper + tenure, data = wage1)
u_hat <- resid(reg)
sigma_2 <- (t(u_hat)) %*% u_hat) / (526 - 3 - 1)
# 61
# a)
data(lawsch85, package = "wooldridge")
data("lawsch85", package = "wooldridge")
reg <- lm(salary ~ LSAT + GPA + llibvol + lcost + rank, data = lawsch85)
summary(reg)
# b)
is.na(lawsch85$LSAT) | is.na(lawsch85$GPA)
# b)
lawsch85[!(is.na(lawsch85$LSAT) | is.na(lawsch85$GPA)),]
qf(0.05, 2, 130, lower.tail = FALSE)
library(fpp3)
library(lubridate)
library(urca)
heart_failure_clinical_records = read.csv('heart_failure_clinical_records.csv')
# Set directory
setwd(C:\Users\Carolina\OneDrive - NOVAIMS\Desktop\Second Year - Second Semester\Forecasting Methods\Practical Classes\Group Project\Project\Project)
library(fpp3)
library(lubridate)
library(urca)
library(tidyverse)
library(tsibble)
library(forecast)
library(dplyr)
library(fpp3)
library(lubridate)
library(urca)
library(tidyverse)
library(tsibble)
library(forecast)
library(dplyr)
rain_in_australia <- read.csv('Rain in Australia.csv')
setwd("C:\Users\Carolina\OneDrive - NOVAIMS\Desktop\Second Year - Second Semester\Forecasting Methods\Practical Classes\Group Project\Project\Project")
setwd("C:\\Users\\Carolina\\OneDrive - NOVAIMS\\Desktop\\Second Year - Second Semester\\Forecasting Methods\\Practical Classes\\Group Project\\Project\Project")
setwd("C:\\Users\\Carolina\\OneDrive - NOVAIMS\\Desktop\\Second Year - Second Semester\\Forecasting Methods\\Practical Classes\\Group Project\\Project\\Project")
library(fpp3)
library(lubridate)
library(urca)
library(tidyverse)
library(tsibble)
library(forecast)
library(dplyr)
rain_in_australia <- read.csv('Rain in Australia.csv')
# Format the Date column by replacing the hyphens by slashes
rain_in_australia <- rain_in_australia %>% mutate(Date = gsub("-", "/", Date))
# Transform the dataset into a tsibble
rain_in_australia_ts <- rain_in_australia %>%
mutate(Month = yearmonth(Date)) %>%
group_by(Month) %>%
summarise(Rainfall = mean(Rainfall, na.rm = TRUE)) %>%
select(Month, Rainfall) %>%
as_tsibble(index = Month)
# Some periods don't have data
# Feeling the gaps with NaNs
rain_in_australia_ts <- fill_gaps(rain_in_australia_ts)
# Replacing any missing values in the 'Rainfall' column with the mean value.
mean_value <- mean(rain_in_australia_ts$Rainfall, na.rm = TRUE)
rain_in_australia_ts$Rainfall <- ifelse(is.na(rain_in_australia_ts$Rainfall), mean_value, rain_in_australia_ts$Rainfall)
# We don't have missing values anymore
missing_values_per_column <- sapply(rain_in_australia_ts, function(x) sum(is.na(x)))
print(missing_values_per_column)
# Deciding the proportion we will have for training and testing sets
start_date <- as.Date("2007-11-01")
end_date <- as.Date("2017-06-25")
threshold_date <- as.Date("2015-01-01")
train_days <- as.numeric(threshold_date - start_date)
test_days <- as.numeric(end_date - threshold_date)
cat(round((train_days/total_days) * 100, 2), '% of the dataset will be training data', round((test_days/total_days) * 100, 2), '% of the dataset will be test data')
total_days <- as.numeric(end_date - start_date)
cat(round((train_days/total_days) * 100, 2), '% of the dataset will be training data', round((test_days/total_days) * 100, 2), '% of the dataset will be test data')
# Splitting the data into train and test datasets
rain_in_australia_ts_train <- rain_in_australia_ts %>% filter(year(Month) < 2015)
rain_in_australia_ts_test <- rain_in_australia_ts %>% filter(year(Month) >= 2015)
rain_in_australia_ts_train %>%
ggplot(aes(y = Rainfall, x = Month))+
geom_line(color = 'black') + labs(
title = "Daily amount of rainfall (mm)",
x = 'Months [1M]', y = 'Rainfall') + theme_minimal()
# Check the log transformation
rain_in_australia_ts_train %>%
ggplot(aes(x = Month, y = log(Rainfall))) +
geom_line(color = 'black') + labs(title = "Log-transformed Rainfall", x = 'Months [1M]', y = 'Log(Rainfall) (log(mm))') +
theme_minimal()
# Estimating the lambda
rainfall_ts <- ts(rain_in_australia_ts_train$Rainfall, start = c(2007, 11), frequency = 12)
lambda_guerrero <- guerrero(rainfall_ts)
lambda_guerrero
rain_in_australia_ts_train$AdjustedRainfall <- BoxCox(rain_in_australia_ts_train$Rainfall, lambda_guerrero)
rain_in_australia_ts_train %>%
ggplot(aes(x = Month, y = AdjustedRainfall)) +
geom_line(color = 'black') + labs(title = "Adjusted Rainfall", x = 'Months [1M]', y = 'Adjusted Rainfall') +
theme_minimal()
View(rain_in_australia_ts_train)
# Testing if it is Stationary - Augmented Dickey-Fuller (ADF) test
summary(ur.df(rain_in_australia_ts_train$AdjustedRainfall, type = "none", lags = 12))
rain_in_australia_ts_train <- rain_in_australia_ts_train %>%
mutate("seasonal_diff_val" = difference(AdjustedRainfall, lag = 12)) %>% na.omit()
rain_in_australia_ts_train %>%
ggplot(aes(y = seasonal_diff_val, x = Month))+
geom_line(color = 'black') + labs(title = "Adjusted Rainfall- Seasonal Differenced", x = 'Months [1M]', y = 'Adjusted Rainfall') + theme_minimal()
rain_in_australia_ts_train %>%
gg_tsdisplay(seasonal_diff_val, plot_type = 'partial') + labs(title = "Adjusted Rainfall- Seasonal Differenced", x = 'Months [1M]', y = 'Adjusted Rainfall')
#Testing if the seasonally differenced series is stationary - ADF test
summary(ur.df(rain_in_australia_ts_train$seasonal_diff_val, type = 'none', lags = 12))
# Since our series is now stationary, let's analyse the ACF and the PACF so we can decide on the candidate models
rain_in_australia_ts_train %>% gg_tsdisplay(seasonal_diff_val, plot_type = 'partial', lag_max = 36) +
labs(title = "Transformed and Seasonally Differenced Rainfall", x = 'Months [1M]', y = 'Adjusted Rainfall')
fit <- rain_in_australia_ts_train %>%
model(
sarima002011 = ARIMA(box_cox(Rainfall, lambda_guerrero) ~ pdq(0,0,2) + PDQ(0,1,1)),
sarima200011 = ARIMA(box_cox(Rainfall, lambda_guerrero) ~ pdq(2,0,0) + PDQ(0,1,1)),
sarima202011 = ARIMA(box_cox(Rainfall, lambda_guerrero) ~ pdq(2,0,2) + PDQ(0,1,1)),
sarima002010 = ARIMA(box_cox(Rainfall, lambda_guerrero) ~ pdq(0,0,2) + PDQ(0,1,0)),
sarima200010 = ARIMA(box_cox(Rainfall, lambda_guerrero) ~ pdq(2,0,0) + PDQ(0,1,0)),
sarima200111 = ARIMA(box_cox(Rainfall, lambda_guerrero) ~ pdq(2,0,0) + PDQ(1,1,1)),
sarima200012 = ARIMA(box_cox(Rainfall, lambda_guerrero) ~ pdq(2, 0, 0) + PDQ(0,1,2)),
auto_ARIMA = ARIMA(box_cox(Rainfall, lambda_guerrero)))
fit %>% glance()
fit_1 <- rain_in_australia_ts_train %>%
model(
sarima002011 = ARIMA(box_cox(Rainfall, lambda_guerrero) ~ pdq(0,0,2) + PDQ(0,1,1)),
sarima200011 = ARIMA(box_cox(Rainfall, lambda_guerrero) ~ pdq(2,0,0) + PDQ(0,1,1)),
sarima202011 = ARIMA(box_cox(Rainfall, lambda_guerrero) ~ pdq(2,0,2) + PDQ(0,1,1)),
sarima002010 = ARIMA(box_cox(Rainfall, lambda_guerrero) ~ pdq(0,0,2) + PDQ(0,1,0)),
sarima200010 = ARIMA(box_cox(Rainfall, lambda_guerrero) ~ pdq(2,0,0) + PDQ(0,1,0)),
sarima200111 = ARIMA(box_cox(Rainfall, lambda_guerrero) ~ pdq(2,0,0) + PDQ(1,1,1)),
sarima200012 = ARIMA(box_cox(Rainfall, lambda_guerrero) ~ pdq(2, 0, 0) + PDQ(0,1,2)),
auto_ARIMA = ARIMA(box_cox(Rainfall, lambda_guerrero)))
fit_1 %>% glance()
fit_2 <- rain_in_australia_ts_train %>%
model(
sarima002011 = ARIMA(box_cox(Rainfall, 0) ~ pdq(0,0,2) + PDQ(0,1,1)),
sarima200011 = ARIMA(box_cox(Rainfall, 0) ~ pdq(2,0,0) + PDQ(0,1,1)),
sarima202011 = ARIMA(box_cox(Rainfall, 0) ~ pdq(2,0,2) + PDQ(0,1,1)),
sarima002010 = ARIMA(box_cox(Rainfall, 0) ~ pdq(0,0,2) + PDQ(0,1,0)),
sarima200010 = ARIMA(box_cox(Rainfall, 0) ~ pdq(2,0,0) + PDQ(0,1,0)),
sarima200111 = ARIMA(box_cox(Rainfall, 0) ~ pdq(2,0,0) + PDQ(1,1,1)),
sarima200012 = ARIMA(box_cox(Rainfall, 0) ~ pdq(2, 0, 0) + PDQ(0,1,2)),
auto_ARIMA = ARIMA(box_cox(Rainfall, 0)))
fit_2 %>% glance()
fit_1 %>% select(sarima200011) %>% report()
fit_1 %>%
select(sarima200011) %>%
gg_tsresiduals() + labs(title = "Residuals of SARIMA200011 model", x = 'Months [1M]')
# ljung_box test
fit_1 %>%
select(sarima200011) %>%
augment() %>%
features(.innov, ljung_box, lag = 36)
# box_pierce test
fit_1 %>%
select(sarima200011) %>%
augment() %>%
features(.innov, box_pierce, lag = 36)
# Forecasting
fit_1 %>% forecast(h = '2 years') %>% accuracy(data_test)
# Forecasting
fit_1 %>% forecast(h = '2 years') %>% accuracy(rain_in_australia_ts_test)
best_model <- accuracy_metrics %>%
filter(.metric %in% c("RMSE", "MAE", "MAPE")) %>%
group_by(.model) %>%
summarize(across(.value, mean, na.rm = TRUE)) %>%
arrange(RMSE) %>%
slice(1)
# Forecasting
fit_1 %>%
select(sarima200011) %>%
forecast(h = '48 months') %>%
autoplot(rain_in_australia_ts_test, level = FALSE) +
ggtitle("Amount of Rainfall recorded in Australia, in mm") +
labs(subtitle = "Forecasts of SARIMA2000111") +
xlab("Months [1M]") + ylab("Rainfall") +
theme_minimal()
# Forecasting
fit_1 %>%
select(sarima200011) %>%
forecast(h = 24) %>%
autoplot(rain_in_australia_ts_test, level = FALSE) +
ggtitle("Amount of Rainfall recorded in Australia, in mm") +
labs(subtitle = "Forecasts of SARIMA2000111") +
xlab("Months [1M]") + ylab("Rainfall") +
theme_minimal()
# Forecasting
fit_1 %>%
select(sarima200011) %>%
forecast(h = 72) %>%
autoplot(rain_in_australia_ts_test, level = FALSE) +
ggtitle("Amount of Rainfall recorded in Australia, in mm") +
labs(subtitle = "Forecasts of SARIMA2000111") +
xlab("Months [1M]") + ylab("Rainfall") +
theme_minimal()
# Forecasting
fit_1 %>%
select(sarima200011) %>%
forecast(h = 60) %>%
autoplot(rain_in_australia_ts_test, level = FALSE) +
ggtitle("Amount of Rainfall recorded in Australia, in mm") +
labs(subtitle = "Forecasts of SARIMA2000111") +
xlab("Months [1M]") + ylab("Rainfall") +
theme_minimal()
# Measure the accuracy
fit_1 %>% forecast(h = 60) %>% accuracy(rain_in_australia_ts_test)
# Measure the accuracy
fit_1 %>%
select(sarima200011) %>%
forecast(h = 60) %>%
accuracy(rain_in_australia_ts_test)
